function Board.new 0
    push constant 8
    call Memory.alloc 1
    pop pointer 0
    push constant 10
    pop this 1
    push constant 10
    pop this 2
    push constant 0
    pop this 4
    push constant 0
    pop this 5
    push constant 0
    pop this 7
    push this 1
    push this 2
    call Math.multiply 2
    call Array.new 1
    pop this 0
    push constant 10
    pop this 3
    push pointer 0
    call Board.InitializeBoard 1
    pop temp 0
    push pointer 0
    call Board.CalculateNumbers 1
    pop temp 0
    push pointer 0
    return
function Board.InitializeBoard 3
    push argument 0
    pop pointer 0
    push constant 0
    pop local 0
label Board_0
    push local 0
    push this 1
    push this 2
    call Math.multiply 2
    lt
    not
    if-goto Board_1
    push local 0
    call Cell.new 1
    pop local 2
    push local 0
    push this 0
    add
    push local 2
    pop temp 0
    pop pointer 1
    push temp 0
    pop that 0
    push local 2
    call UI.RenderClosedCell 1
    pop temp 0
    push local 0
    push constant 1
    add
    pop local 0
    goto Board_0
label Board_1
    push constant 0
    pop local 0
label Board_2
    push local 0
    push this 3
    lt
    not
    if-goto Board_3
    push this 1
    push this 2
    call Math.multiply 2
    call Random.Randint 1
    pop local 1
    push local 1
    push this 0
    add
    pop pointer 1
    push that 0
    pop local 2
    push local 2
    call Cell.IsMine 1
    not
    not
    if-goto Board_5
    push local 2
    call Cell.PlaceMine 1
    pop temp 0
    push local 0
    push constant 1
    add
    pop local 0
    goto Board_4
label Board_5
label Board_4
    goto Board_2
label Board_3
    push constant 0
    return
function Board.CalculateNumbers 7
    push argument 0
    pop pointer 0
    push constant 0
    pop local 0
label Board_6
    push local 0
    push this 1
    lt
    not
    if-goto Board_7
    push constant 0
    pop local 1
label Board_8
    push local 1
    push this 2
    lt
    not
    if-goto Board_9
    push local 0
    push this 1
    call Math.multiply 2
    push local 1
    add
    pop local 4
    push constant 0
    pop local 5
    push local 4
    push this 0
    add
    pop pointer 1
    push that 0
    pop local 6
    push local 6
    call Cell.IsMine 1
    not
    not
    if-goto Board_11
    push constant 1
    neg
    pop local 2
label Board_12
    push local 2
    push constant 2
    lt
    not
    if-goto Board_13
    push constant 1
    neg
    pop local 3
label Board_14
    push local 3
    push constant 2
    lt
    not
    if-goto Board_15
    push local 0
    push local 2
    add
    push constant 1
    neg
    gt
    push local 0
    push local 2
    add
    push this 1
    lt
    and
    push local 1
    push local 3
    add
    push constant 1
    neg
    gt
    and
    push local 1
    push local 3
    add
    push this 2
    lt
    and
    not
    if-goto Board_17
    push local 0
    push local 2
    add
    push this 1
    call Math.multiply 2
    push local 1
    push local 3
    add
    add
    push this 0
    add
    pop pointer 1
    push that 0
    pop local 6
    push local 6
    call Cell.IsMine 1
    not
    if-goto Board_19
    push local 5
    push constant 1
    add
    pop local 5
    goto Board_18
label Board_19
label Board_18
    goto Board_16
label Board_17
label Board_16
    push local 3
    push constant 1
    add
    pop local 3
    goto Board_14
label Board_15
    push local 2
    push constant 1
    add
    pop local 2
    goto Board_12
label Board_13
    push local 6
    push local 5
    call Cell.SetAdjasent 2
    pop temp 0
    goto Board_10
label Board_11
label Board_10
    push local 1
    push constant 1
    add
    pop local 1
    goto Board_8
label Board_9
    push local 0
    push constant 1
    add
    pop local 0
    goto Board_6
label Board_7
    push constant 0
    return
function Board.RenderCell 1
    push argument 0
    pop pointer 0
    push argument 2
    push this 1
    call Math.multiply 2
    push argument 1
    add
    push this 0
    add
    pop pointer 1
    push that 0
    pop local 0
    push local 0
    call Cell.IsRevealed 1
    not
    not
    if-goto Board_21
    push local 0
    call Cell.IsFlagged 1
    not
    if-goto Board_23
    push local 0
    call UI.RenderFlag 1
    pop temp 0
    goto Board_22
label Board_23
    push local 0
    call UI.RenderClosedCell 1
    pop temp 0
label Board_22
    goto Board_20
label Board_21
    push local 0
    call UI.RenderOpenCell 1
    pop temp 0
label Board_20
    push constant 0
    return
function Board.RevealCell 1
    push argument 0
    pop pointer 0
    push argument 2
    push this 1
    call Math.multiply 2
    push argument 1
    add
    push this 0
    add
    pop pointer 1
    push that 0
    pop local 0
    push local 0
    call Cell.IsRevealed 1
    not
    push local 0
    call Cell.IsFlagged 1
    not
    and
    not
    if-goto Board_25
    push local 0
    call Cell.RevealCell 1
    pop temp 0
    goto Board_24
label Board_25
label Board_24
    push constant 0
    return
function Board.ToggleFlag 1
    push argument 0
    pop pointer 0
    push argument 2
    push this 1
    call Math.multiply 2
    push argument 1
    add
    push this 0
    add
    pop pointer 1
    push that 0
    pop local 0
    push local 0
    call Cell.IsRevealed 1
    not
    not
    if-goto Board_27
    push local 0
    call Cell.IsMine 1
    not
    if-goto Board_29
    push local 0
    call Cell.IsFlagged 1
    not
    if-goto Board_31
    push this 6
    push constant 1
    sub
    pop this 6
    goto Board_30
label Board_31
    push this 6
    push constant 1
    add
    pop this 6
label Board_30
    goto Board_28
label Board_29
label Board_28
    push local 0
    call Cell.IsFlagged 1
    not
    if-goto Board_33
    push this 7
    push constant 1
    sub
    pop this 7
    goto Board_32
label Board_33
    push this 7
    push constant 1
    add
    pop this 7
label Board_32
    push local 0
    call Cell.ChangeFlag 1
    pop temp 0
    goto Board_26
label Board_27
label Board_26
    push constant 0
    return
function Board.MoveCursorX 0
    push argument 0
    pop pointer 0
    push this 4
    push argument 1
    add
    push constant 50
    lt
    push this 4
    push argument 1
    add
    push constant 0
    gt
    and
    not
    if-goto Board_35
    push this 4
    push argument 1
    add
    pop this 4
    goto Board_34
label Board_35
label Board_34
    push constant 0
    return
function Board.MoveCursorY 0
    push argument 0
    pop pointer 0
    push this 5
    push argument 1
    add
    push constant 50
    lt
    push this 5
    push argument 1
    add
    push constant 0
    gt
    and
    not
    if-goto Board_37
    push this 5
    push argument 1
    add
    pop this 5
    goto Board_36
label Board_37
label Board_36
    push constant 0
    return
function Board.GetCursorX 0
    push argument 0
    pop pointer 0
    push this 4
    push constant 5
    call Math.divide 2
    push constant 1
    add
    return
function Board.GetCursorY 0
    push argument 0
    pop pointer 0
    push this 5
    push constant 5
    call Math.divide 2
    push constant 1
    add
    return
function Board.IsWin 0
    push argument 0
    pop pointer 0
    push this 6
    push this 3
    eq
    push this 3
    push this 7
    eq
    and
    return
function Board.IsLoss 3
    push argument 0
    pop pointer 0
    push constant 0
    pop local 1
    push constant 0
    pop local 0
label Board_38
    push local 1
    push this 1
    push this 2
    call Math.multiply 2
    lt
    not
    if-goto Board_39
    push local 1
    push this 0
    add
    pop pointer 1
    push that 0
    pop local 2
    push local 2
    call Cell.IsRevealed 1
    push local 2
    call Cell.IsMine 1
    and
    not
    if-goto Board_41
    push constant 1
    neg
    pop local 0
    push this 1
    push this 2
    call Math.multiply 2
    pop local 1
    goto Board_40
label Board_41
label Board_40
    push local 1
    push constant 1
    add
    pop local 1
    goto Board_38
label Board_39
    push local 0
    return